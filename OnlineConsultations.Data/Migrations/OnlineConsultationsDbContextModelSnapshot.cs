// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineConsultations.Data;

#nullable disable

namespace OnlineConsultations.Data.Migrations
{
    [DbContext(typeof(OnlineConsultationsDbContext))]
    partial class OnlineConsultationsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator().HasValue("IdentityRole");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OnlineConsultations.Data.Entities.Answer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnswerId"));

                    b.Property<DateTime>("AnswerDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AnswerDescription")
                        .IsRequired()
                        .HasMaxLength(200000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvideUserId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("AnswerId");

                    b.HasIndex("ProvideUserId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            AnswerId = 1,
                            AnswerDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AnswerDescription = "Answer First",
                            ProvideUserId = 1,
                            QuestionId = 1
                        },
                        new
                        {
                            AnswerId = 2,
                            AnswerDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AnswerDescription = "Answer Second",
                            ProvideUserId = 1,
                            QuestionId = 2
                        },
                        new
                        {
                            AnswerId = 3,
                            AnswerDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AnswerDescription = "Answer Third",
                            ProvideUserId = 1,
                            QuestionId = 3
                        },
                        new
                        {
                            AnswerId = 4,
                            AnswerDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AnswerDescription = "Answer Fourth",
                            ProvideUserId = 2,
                            QuestionId = 1
                        },
                        new
                        {
                            AnswerId = 5,
                            AnswerDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AnswerDescription = "Answer Fifth",
                            ProvideUserId = 2,
                            QuestionId = 3
                        },
                        new
                        {
                            AnswerId = 6,
                            AnswerDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AnswerDescription = "Answer Sixth",
                            ProvideUserId = 2,
                            QuestionId = 3
                        },
                        new
                        {
                            AnswerId = 7,
                            AnswerDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AnswerDescription = "Answer Seventh",
                            ProvideUserId = 3,
                            QuestionId = 2
                        },
                        new
                        {
                            AnswerId = 8,
                            AnswerDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AnswerDescription = "Answer Eighth",
                            ProvideUserId = 3,
                            QuestionId = 2
                        },
                        new
                        {
                            AnswerId = 9,
                            AnswerDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AnswerDescription = "Answer Ninth",
                            ProvideUserId = 3,
                            QuestionId = 3
                        });
                });

            modelBuilder.Entity("OnlineConsultations.Data.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "admin@admin.com",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e021d8f6-9d30-4582-8c68-f24b15e7033f",
                            Email = "admin@admin.com",
                            EmailConfirmed = false,
                            FirstName = "AdminFirstName",
                            LastName = "AdminLastName",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEJ3cdHfh10XOeXN4JEWAy+x40iTnzw11j72Dck6wRxHarGFX88XqMn6WgWNTM7y5vg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f097f7cd-7d8c-43c7-a7b8-7f64558a4506",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        },
                        new
                        {
                            Id = "guest1@guest.com",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4eb5f884-244c-4c5c-9f22-12989274ddb0",
                            Email = "guest1@guest.com",
                            EmailConfirmed = false,
                            FirstName = "GuestOneFirstName",
                            LastName = "GuestOneLastName",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEI54t8zgN4Zl4EhFC1unZG0MUolUIOwhS3oHE04IZAiKfVlbhJFiUZ/7F6wln7bM6Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d7e508fd-0702-4eaa-bc4e-c3e4b252fa14",
                            TwoFactorEnabled = false,
                            UserName = "guest1@guest.com"
                        },
                        new
                        {
                            Id = "guest2@guest.com",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "83a4d944-e784-4cd8-a702-f2e5dcdd8966",
                            Email = "guest2@guest.com",
                            EmailConfirmed = false,
                            FirstName = "GuestTwoFirstName",
                            LastName = "GuestTwoLastName",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEHI8WNCgN7mnpQJZDE0LI35nlmlsec1B15F2EIRCAI0p5qKo/emuWp3oyDM2dT1Cgg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2fd69655-9e80-4870-a04d-47d522bad4fe",
                            TwoFactorEnabled = false,
                            UserName = "guest2@guest.com"
                        },
                        new
                        {
                            Id = "guest3@guest.com",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0ff8d0f1-f783-4dda-98d5-e07c346e6177",
                            Email = "guest3@guest.com",
                            EmailConfirmed = false,
                            FirstName = "GuestThreeFirstName",
                            LastName = "GuestThreeLastName",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEF6MsNmLxf6LvIUNKZMvBGIHx2OzFshdURU5/qEho+vUqjfcr1XXrfjInjJ/l9biww==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d026c306-d5b5-49de-9c8c-86c0ac917c09",
                            TwoFactorEnabled = false,
                            UserName = "guest3@guest.com"
                        },
                        new
                        {
                            Id = "search1@search.com",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b583dd63-f53b-4d14-88c2-9a808650c1a5",
                            Email = "search1@search.com",
                            EmailConfirmed = false,
                            FirstName = "SearchOneFirstName",
                            LastName = "SearchOneLastName",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEDSxTeVldzHnQVpPhNGQW0zVN+wR8HP3yDnl9KPU98NaoWiOj9ALfQ4zxaWd7/ERdQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9d79d625-6741-4da0-83d5-73be7f68075f",
                            TwoFactorEnabled = false,
                            UserName = "search1@search.com"
                        },
                        new
                        {
                            Id = "search2@search.com",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cfda0e09-7890-42e8-a972-ea6ca2128ffd",
                            Email = "search2@search.com",
                            EmailConfirmed = false,
                            FirstName = "SearchTwoFirstName",
                            LastName = "SearchTwoLastName",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEN8bXN2vs4ARe4bmOp8JGglKS/+tZz1dhF2KiV2P8o7DOKtKOtipKcIyZLIoGyjcCQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "41b8acfb-29d6-474e-96de-537ab67af287",
                            TwoFactorEnabled = false,
                            UserName = "search2@search.com"
                        },
                        new
                        {
                            Id = "search3@search.com",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b984478c-bfa9-4dd7-bc12-7e8557db4a5d",
                            Email = "search3@search.com",
                            EmailConfirmed = false,
                            FirstName = "SearchThreeFirstName",
                            LastName = "SearchThreeLastName",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAENkmSoyo5BP6/Rremumi+sgFs0YR5BudYyte8oJpRZ/5dfrJZnMud55UCzf/MAre6A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "26606702-f53a-4f6a-83e7-b2640c086275",
                            TwoFactorEnabled = false,
                            UserName = "search3@search.com"
                        },
                        new
                        {
                            Id = "provide1@provide.com",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "48ed3f2c-7bed-4dca-97ce-9a510ae51a84",
                            Email = "provide1@provide.com",
                            EmailConfirmed = false,
                            FirstName = "ProvideOneFirstName",
                            LastName = "ProvideOneLastName",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEMSyq58qQ3NcL1LNYlw5mBvAA/9EfwoTpf2F2X+nak4phhxM9/RCPLTRvzhrOYEpsQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f378ffdd-3bf1-4e55-8e72-328a00ef16c6",
                            TwoFactorEnabled = false,
                            UserName = "provide1@provide.com"
                        },
                        new
                        {
                            Id = "provide2@provide.com",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "69459317-9855-4708-be7c-375f3bc15aed",
                            Email = "provide2@provide.com",
                            EmailConfirmed = false,
                            FirstName = "ProvideTwoFirstName",
                            LastName = "ProvideTwoLastName",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEBYRSaITzYYiZAsdLrIWBXkQFJakwKlailDX5r+VNzc/0lYWgJLW6jOITw/p6q1YUg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9c892671-b1d9-490a-8df7-5a0ab1f36c87",
                            TwoFactorEnabled = false,
                            UserName = "provide2@provide.com"
                        },
                        new
                        {
                            Id = "provide3@provide.com",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d4ff5145-1712-4f53-950a-0ee77af18eb9",
                            Email = "provide3@provide.com",
                            EmailConfirmed = false,
                            FirstName = "ProvideThreeFirstName",
                            LastName = "ProvideThreeLastName",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEKu9n+nE31QIkX2Xe2gDHzbPS56CuZejoGddeWR/2pjrfavP6CYNIVtdrcj9B6oUYA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "78995b8c-079e-4a3a-8eae-575abdee580c",
                            TwoFactorEnabled = false,
                            UserName = "provide3@provide.com"
                        });
                });

            modelBuilder.Entity("OnlineConsultations.Data.Entities.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<int>("AnswerId")
                        .HasColumnType("int");

                    b.Property<string>("CommentDescription")
                        .IsRequired()
                        .HasMaxLength(200000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommentTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("GuestUserId")
                        .HasColumnType("int");

                    b.Property<int?>("SearchUserId")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("AnswerId");

                    b.HasIndex("GuestUserId");

                    b.HasIndex("SearchUserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            CommentId = 1,
                            AnswerId = 1,
                            CommentDescription = "Comment First",
                            CommentTitle = "First",
                            GuestUserId = 1
                        },
                        new
                        {
                            CommentId = 2,
                            AnswerId = 1,
                            CommentDescription = "Comment Second",
                            CommentTitle = "Second",
                            GuestUserId = 1
                        },
                        new
                        {
                            CommentId = 3,
                            AnswerId = 2,
                            CommentDescription = "Comment Third",
                            CommentTitle = "Third",
                            GuestUserId = 2
                        },
                        new
                        {
                            CommentId = 4,
                            AnswerId = 3,
                            CommentDescription = "Comment Fourth",
                            CommentTitle = "Fourth",
                            GuestUserId = 2
                        },
                        new
                        {
                            CommentId = 5,
                            AnswerId = 3,
                            CommentDescription = "Comment Fifth",
                            CommentTitle = "Fifth",
                            GuestUserId = 1
                        },
                        new
                        {
                            CommentId = 6,
                            AnswerId = 3,
                            CommentDescription = "Comment Sixth",
                            CommentTitle = "Sixth",
                            SearchUserId = 1
                        },
                        new
                        {
                            CommentId = 7,
                            AnswerId = 2,
                            CommentDescription = "Comment Seventh",
                            CommentTitle = "Seventh",
                            SearchUserId = 1
                        },
                        new
                        {
                            CommentId = 8,
                            AnswerId = 4,
                            CommentDescription = "Comment Eight",
                            CommentTitle = "Eight",
                            SearchUserId = 2
                        },
                        new
                        {
                            CommentId = 9,
                            AnswerId = 1,
                            CommentDescription = "Comment Ninth",
                            CommentTitle = "Ninth",
                            SearchUserId = 2
                        },
                        new
                        {
                            CommentId = 10,
                            AnswerId = 2,
                            CommentDescription = "Comment Tenth",
                            CommentTitle = "Tenth",
                            SearchUserId = 2
                        },
                        new
                        {
                            CommentId = 11,
                            AnswerId = 2,
                            CommentDescription = "Comment Eleven",
                            CommentTitle = "Eleven",
                            SearchUserId = 3
                        },
                        new
                        {
                            CommentId = 12,
                            AnswerId = 2,
                            CommentDescription = "Comment Twelve",
                            CommentTitle = "Twelve",
                            SearchUserId = 3
                        });
                });

            modelBuilder.Entity("OnlineConsultations.Data.Entities.GuestUser", b =>
                {
                    b.Property<int>("GuestUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GuestUserId"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("GuestUserId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("GuestUsers");

                    b.HasData(
                        new
                        {
                            GuestUserId = 1,
                            ApplicationUserId = "guest1@guest.com"
                        },
                        new
                        {
                            GuestUserId = 2,
                            ApplicationUserId = "guest2@guest.com"
                        },
                        new
                        {
                            GuestUserId = 3,
                            ApplicationUserId = "guest3@guest.com"
                        });
                });

            modelBuilder.Entity("OnlineConsultations.Data.Entities.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<string>("MessageDescription")
                        .IsRequired()
                        .HasMaxLength(200000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvideUserId")
                        .HasColumnType("int");

                    b.Property<int>("SearchUserId")
                        .HasColumnType("int");

                    b.HasKey("MessageId");

                    b.HasIndex("ProvideUserId");

                    b.HasIndex("SearchUserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            MessageId = 1,
                            MessageDescription = "First message",
                            ProvideUserId = 1,
                            SearchUserId = 1
                        },
                        new
                        {
                            MessageId = 2,
                            MessageDescription = "Second message",
                            ProvideUserId = 1,
                            SearchUserId = 2
                        },
                        new
                        {
                            MessageId = 3,
                            MessageDescription = "Third message",
                            ProvideUserId = 2,
                            SearchUserId = 3
                        },
                        new
                        {
                            MessageId = 4,
                            MessageDescription = "Fourth message",
                            ProvideUserId = 1,
                            SearchUserId = 1
                        },
                        new
                        {
                            MessageId = 5,
                            MessageDescription = "Fifth message",
                            ProvideUserId = 3,
                            SearchUserId = 2
                        },
                        new
                        {
                            MessageId = 6,
                            MessageDescription = "Sixth message",
                            ProvideUserId = 1,
                            SearchUserId = 3
                        },
                        new
                        {
                            MessageId = 7,
                            MessageDescription = "Seventh message",
                            ProvideUserId = 3,
                            SearchUserId = 1
                        },
                        new
                        {
                            MessageId = 8,
                            MessageDescription = "Eight message",
                            ProvideUserId = 1,
                            SearchUserId = 2
                        },
                        new
                        {
                            MessageId = 9,
                            MessageDescription = "Ninth message",
                            ProvideUserId = 2,
                            SearchUserId = 1
                        },
                        new
                        {
                            MessageId = 10,
                            MessageDescription = "Tenth message",
                            ProvideUserId = 2,
                            SearchUserId = 3
                        });
                });

            modelBuilder.Entity("OnlineConsultations.Data.Entities.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"));

                    b.Property<string>("PostDescription")
                        .IsRequired()
                        .HasMaxLength(200000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PostPayPerHour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PostTitle")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ProvideUserId")
                        .HasColumnType("int");

                    b.HasKey("PostId");

                    b.HasIndex("ProvideUserId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            PostId = 1,
                            PostDescription = "First Description",
                            PostPayPerHour = 22m,
                            PostTitle = "First post",
                            ProvideUserId = 1
                        },
                        new
                        {
                            PostId = 2,
                            PostDescription = "Second Description",
                            PostPayPerHour = 24m,
                            PostTitle = "Second post",
                            ProvideUserId = 2
                        },
                        new
                        {
                            PostId = 3,
                            PostDescription = "Third Description",
                            PostPayPerHour = 22m,
                            PostTitle = "Third post",
                            ProvideUserId = 3
                        });
                });

            modelBuilder.Entity("OnlineConsultations.Data.Entities.ProvideUser", b =>
                {
                    b.Property<int>("ProvideUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProvideUserId"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProvideUserId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("ProvideUsers");

                    b.HasData(
                        new
                        {
                            ProvideUserId = 1,
                            ApplicationUserId = "provide1@provide.com"
                        },
                        new
                        {
                            ProvideUserId = 2,
                            ApplicationUserId = "provide2@provide.com"
                        },
                        new
                        {
                            ProvideUserId = 3,
                            ApplicationUserId = "provide3@provide.com"
                        });
                });

            modelBuilder.Entity("OnlineConsultations.Data.Entities.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<int?>("GuestUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("QuestionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("QuestionDescription")
                        .IsRequired()
                        .HasMaxLength(200000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionTitle")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("SearchUserId")
                        .HasColumnType("int");

                    b.HasKey("QuestionId");

                    b.HasIndex("GuestUserId");

                    b.HasIndex("SearchUserId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            QuestionId = 1,
                            QuestionDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QuestionDescription = "First Description",
                            QuestionTitle = "First",
                            SearchUserId = 1
                        },
                        new
                        {
                            QuestionId = 2,
                            QuestionDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QuestionDescription = "Second Description",
                            QuestionTitle = "Second",
                            SearchUserId = 2
                        },
                        new
                        {
                            QuestionId = 3,
                            QuestionDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QuestionDescription = "Third Description",
                            QuestionTitle = "Third",
                            SearchUserId = 3
                        },
                        new
                        {
                            QuestionId = 4,
                            GuestUserId = 1,
                            QuestionDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QuestionDescription = "Fourth Description",
                            QuestionTitle = "Fourth"
                        });
                });

            modelBuilder.Entity("OnlineConsultations.Data.Entities.Rating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingId"));

                    b.Property<int>("ProvideUserId")
                        .HasColumnType("int");

                    b.Property<int>("RatingValue")
                        .HasColumnType("int");

                    b.Property<int>("SearchUserId")
                        .HasColumnType("int");

                    b.HasKey("RatingId");

                    b.HasIndex("ProvideUserId");

                    b.HasIndex("SearchUserId");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            RatingId = 1,
                            ProvideUserId = 1,
                            RatingValue = 10,
                            SearchUserId = 1
                        },
                        new
                        {
                            RatingId = 2,
                            ProvideUserId = 2,
                            RatingValue = 9,
                            SearchUserId = 1
                        },
                        new
                        {
                            RatingId = 3,
                            ProvideUserId = 3,
                            RatingValue = 8,
                            SearchUserId = 1
                        },
                        new
                        {
                            RatingId = 4,
                            ProvideUserId = 1,
                            RatingValue = 10,
                            SearchUserId = 2
                        },
                        new
                        {
                            RatingId = 5,
                            ProvideUserId = 2,
                            RatingValue = 9,
                            SearchUserId = 2
                        },
                        new
                        {
                            RatingId = 6,
                            ProvideUserId = 3,
                            RatingValue = 9,
                            SearchUserId = 2
                        },
                        new
                        {
                            RatingId = 7,
                            ProvideUserId = 1,
                            RatingValue = 8,
                            SearchUserId = 3
                        },
                        new
                        {
                            RatingId = 8,
                            ProvideUserId = 2,
                            RatingValue = 9,
                            SearchUserId = 3
                        },
                        new
                        {
                            RatingId = 9,
                            ProvideUserId = 3,
                            RatingValue = 10,
                            SearchUserId = 3
                        });
                });

            modelBuilder.Entity("OnlineConsultations.Data.Entities.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<int>("ProvideUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewDescription")
                        .IsRequired()
                        .HasMaxLength(200000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SearchUserId")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("ProvideUserId");

                    b.HasIndex("SearchUserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            ReviewId = 1,
                            ProvideUserId = 1,
                            ReviewDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReviewDescription = "First description",
                            SearchUserId = 1
                        },
                        new
                        {
                            ReviewId = 2,
                            ProvideUserId = 2,
                            ReviewDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReviewDescription = "Second description",
                            SearchUserId = 1
                        },
                        new
                        {
                            ReviewId = 3,
                            ProvideUserId = 3,
                            ReviewDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReviewDescription = "Third description",
                            SearchUserId = 1
                        },
                        new
                        {
                            ReviewId = 4,
                            ProvideUserId = 1,
                            ReviewDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReviewDescription = "Fourth description",
                            SearchUserId = 2
                        },
                        new
                        {
                            ReviewId = 5,
                            ProvideUserId = 2,
                            ReviewDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReviewDescription = "Fifth description",
                            SearchUserId = 2
                        },
                        new
                        {
                            ReviewId = 6,
                            ProvideUserId = 3,
                            ReviewDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReviewDescription = "Sixth description",
                            SearchUserId = 2
                        },
                        new
                        {
                            ReviewId = 7,
                            ProvideUserId = 1,
                            ReviewDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReviewDescription = "Seventh description",
                            SearchUserId = 3
                        },
                        new
                        {
                            ReviewId = 8,
                            ProvideUserId = 2,
                            ReviewDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReviewDescription = "Eight description",
                            SearchUserId = 3
                        },
                        new
                        {
                            ReviewId = 9,
                            ProvideUserId = 3,
                            ReviewDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReviewDescription = "Ninth description",
                            SearchUserId = 3
                        });
                });

            modelBuilder.Entity("OnlineConsultations.Data.Entities.SearchUser", b =>
                {
                    b.Property<int>("SearchUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SearchUserId"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SearchUserId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("SearchUsers");

                    b.HasData(
                        new
                        {
                            SearchUserId = 1,
                            ApplicationUserId = "search1@search.com"
                        },
                        new
                        {
                            SearchUserId = 2,
                            ApplicationUserId = "search2@search.com"
                        },
                        new
                        {
                            SearchUserId = 3,
                            ApplicationUserId = "search3@search.com"
                        });
                });

            modelBuilder.Entity("OnlineConsultations.Data.Entities.ApplicationRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasDiscriminator().HasValue("ApplicationRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OnlineConsultations.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OnlineConsultations.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineConsultations.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OnlineConsultations.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineConsultations.Data.Entities.Answer", b =>
                {
                    b.HasOne("OnlineConsultations.Data.Entities.ProvideUser", "ProvideUser")
                        .WithMany()
                        .HasForeignKey("ProvideUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineConsultations.Data.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProvideUser");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("OnlineConsultations.Data.Entities.Comment", b =>
                {
                    b.HasOne("OnlineConsultations.Data.Entities.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineConsultations.Data.Entities.GuestUser", "GuestUser")
                        .WithMany()
                        .HasForeignKey("GuestUserId");

                    b.HasOne("OnlineConsultations.Data.Entities.SearchUser", "SearchUser")
                        .WithMany()
                        .HasForeignKey("SearchUserId");

                    b.Navigation("Answer");

                    b.Navigation("GuestUser");

                    b.Navigation("SearchUser");
                });

            modelBuilder.Entity("OnlineConsultations.Data.Entities.GuestUser", b =>
                {
                    b.HasOne("OnlineConsultations.Data.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("OnlineConsultations.Data.Entities.Message", b =>
                {
                    b.HasOne("OnlineConsultations.Data.Entities.ProvideUser", "ProvideUser")
                        .WithMany()
                        .HasForeignKey("ProvideUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineConsultations.Data.Entities.SearchUser", "SearchUser")
                        .WithMany()
                        .HasForeignKey("SearchUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProvideUser");

                    b.Navigation("SearchUser");
                });

            modelBuilder.Entity("OnlineConsultations.Data.Entities.Post", b =>
                {
                    b.HasOne("OnlineConsultations.Data.Entities.ProvideUser", "ProvideUser")
                        .WithMany()
                        .HasForeignKey("ProvideUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProvideUser");
                });

            modelBuilder.Entity("OnlineConsultations.Data.Entities.ProvideUser", b =>
                {
                    b.HasOne("OnlineConsultations.Data.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("OnlineConsultations.Data.Entities.Question", b =>
                {
                    b.HasOne("OnlineConsultations.Data.Entities.GuestUser", "GuestUser")
                        .WithMany()
                        .HasForeignKey("GuestUserId");

                    b.HasOne("OnlineConsultations.Data.Entities.SearchUser", "SearchUser")
                        .WithMany()
                        .HasForeignKey("SearchUserId");

                    b.Navigation("GuestUser");

                    b.Navigation("SearchUser");
                });

            modelBuilder.Entity("OnlineConsultations.Data.Entities.Rating", b =>
                {
                    b.HasOne("OnlineConsultations.Data.Entities.ProvideUser", "ProvideUser")
                        .WithMany()
                        .HasForeignKey("ProvideUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineConsultations.Data.Entities.SearchUser", "SearchUser")
                        .WithMany()
                        .HasForeignKey("SearchUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProvideUser");

                    b.Navigation("SearchUser");
                });

            modelBuilder.Entity("OnlineConsultations.Data.Entities.Review", b =>
                {
                    b.HasOne("OnlineConsultations.Data.Entities.ProvideUser", "ProvideUser")
                        .WithMany()
                        .HasForeignKey("ProvideUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineConsultations.Data.Entities.SearchUser", "SearchUser")
                        .WithMany()
                        .HasForeignKey("SearchUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProvideUser");

                    b.Navigation("SearchUser");
                });

            modelBuilder.Entity("OnlineConsultations.Data.Entities.SearchUser", b =>
                {
                    b.HasOne("OnlineConsultations.Data.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });
#pragma warning restore 612, 618
        }
    }
}
